// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hNext.DbAccessMSSQLCore;

namespace hNext.DbAccessMSSQLCore.Migrations
{
    [DbContext(typeof(hNextDbContext))]
    [Migration("20190711174318_AddActiveFieldToCaseHistoryDiagnosys")]
    partial class AddActiveFieldToCaseHistoryDiagnosys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("hNext.Model.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressTypeId");

                    b.Property<string>("Apartment")
                        .HasMaxLength(50);

                    b.Property<string>("Building")
                        .HasMaxLength(50);

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<int?>("DistrictId");

                    b.Property<int?>("RegionId");

                    b.Property<int?>("StreetId");

                    b.Property<string>("Zip")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StreetId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("hNext.Model.AddressType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("hNext.Model.CaseHistory", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("Admitted")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Discharged")
                        .HasColumnType("date");

                    b.Property<int>("HospitalId");

                    b.Property<bool>("Insured");

                    b.Property<long>("PatientId");

                    b.Property<int?>("ReferredById");

                    b.Property<byte?>("Result");

                    b.Property<byte?>("Severity");

                    b.Property<byte?>("Urgency");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReferredById");

                    b.ToTable("CaseHistories");
                });

            modelBuilder.Entity("hNext.Model.CaseHistoryAdmission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CaseHistoryId");

                    b.Property<int?>("DepartmentId");

                    b.Property<DateTime?>("Discharged")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CaseHistoryId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CaseHistoryAdmissions");
                });

            modelBuilder.Entity("hNext.Model.CaseHistoryDiagnosys", b =>
                {
                    b.Property<long>("CaseHistoryId");

                    b.Property<long>("DiagnosysId");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<byte?>("Type");

                    b.Property<byte?>("WhenSet");

                    b.HasKey("CaseHistoryId", "DiagnosysId");

                    b.HasIndex("DiagnosysId");

                    b.ToTable("CaseHistoryDiagnoses");
                });

            modelBuilder.Entity("hNext.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityTypeId");

                    b.Property<int>("CountryId");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("RegionId");

                    b.Property<string>("eHealthId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CityTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Name");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("hNext.Model.CityType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("CityTypes");
                });

            modelBuilder.Entity("hNext.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("hNext.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HospitalId");

                    b.Property<string>("Login");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("Name");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("hNext.Model.DepartmentEmail", b =>
                {
                    b.Property<int>("DepartmentId");

                    b.Property<long>("EmailId");

                    b.HasKey("DepartmentId", "EmailId");

                    b.HasIndex("EmailId");

                    b.ToTable("DepartmentEmails");
                });

            modelBuilder.Entity("hNext.Model.DepartmentPhone", b =>
                {
                    b.Property<int>("DepartmentId");

                    b.Property<long>("PhoneId");

                    b.HasKey("DepartmentId", "PhoneId");

                    b.HasIndex("PhoneId");

                    b.ToTable("DepartmentPhones");
                });

            modelBuilder.Entity("hNext.Model.DepartmentSpecialty", b =>
                {
                    b.Property<int>("DeparmentId");

                    b.Property<int>("SpecialtyId");

                    b.HasKey("DeparmentId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DepartmentSpecialties");
                });

            modelBuilder.Entity("hNext.Model.Diagnosys", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ICDId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ICDId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("hNext.Model.Diploma", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DoctorId");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<string>("Specialty")
                        .IsRequired();

                    b.Property<string>("University")
                        .IsRequired();

                    b.Property<DateTime>("WhenIssued");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Diplomas");
                });

            modelBuilder.Entity("hNext.Model.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RegionId");

                    b.Property<string>("eHealthId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("hNext.Model.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Code");

                    b.Property<string>("Login");

                    b.Property<long>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("hNext.Model.DoctorPosition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId");

                    b.Property<long>("DoctorId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("HospitalId");

                    b.Property<int>("PositionId");

                    b.Property<int>("SpecialtyId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorPositions");
                });

            modelBuilder.Entity("hNext.Model.DoctorSpecialty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Category");

                    b.Property<long>("DoctorId");

                    b.Property<DateTime?>("Expires");

                    b.Property<DateTime?>("IssuedDate");

                    b.Property<string>("Number");

                    b.Property<string>("SertifiedBy");

                    b.Property<int>("SpecialtyId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("hNext.Model.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateOfIssue");

                    b.Property<int>("DocumentTypeId");

                    b.Property<string>("IssuedBy")
                        .HasMaxLength(100);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("hNext.Model.DocumentRegistry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AuthorId");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Number");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("DocumentRegistries");
                });

            modelBuilder.Entity("hNext.Model.DocumentType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("hNext.Model.Email", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("hNext.Model.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("hNext.Model.GuardianWard", b =>
                {
                    b.Property<long>("WardId");

                    b.Property<long>("GuardianId");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("WardId", "GuardianId");

                    b.HasIndex("GuardianId");

                    b.ToTable("GuardianWards");
                });

            modelBuilder.Entity("hNext.Model.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId");

                    b.Property<string>("EDRPOU");

                    b.Property<int>("HospitalTypeId");

                    b.Property<string>("Login");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PropertyTypeId");

                    b.Property<string>("ShortName");

                    b.Property<string>("Url");

                    b.Property<string>("eHealtId")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("HospitalTypeId");

                    b.HasIndex("Name");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("hNext.Model.HospitalEmail", b =>
                {
                    b.Property<int>("HospitalId");

                    b.Property<long>("EmailId");

                    b.HasKey("HospitalId", "EmailId");

                    b.HasIndex("EmailId");

                    b.ToTable("HospitalEmails");
                });

            modelBuilder.Entity("hNext.Model.HospitalPhone", b =>
                {
                    b.Property<int>("HospitalId");

                    b.Property<long>("PhoneId");

                    b.HasKey("HospitalId", "PhoneId");

                    b.HasIndex("PhoneId");

                    b.ToTable("HospitalPhones");
                });

            modelBuilder.Entity("hNext.Model.HospitalType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealtId")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("HospitalTypes");
                });

            modelBuilder.Entity("hNext.Model.ICD", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Category");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("Name");

                    b.Property<string>("PrimaryName");

                    b.Property<int>("PrimaryNumber");

                    b.Property<int?>("SecondaryNumber");

                    b.Property<string>("SubCategory");

                    b.HasKey("Id");

                    b.HasIndex("Letter");

                    b.ToTable("ICD");
                });

            modelBuilder.Entity("hNext.Model.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityLicensed");

                    b.Property<DateTime?>("DateOfIssue");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<string>("IssuedBy");

                    b.Property<string>("Number");

                    b.Property<string>("OrderNo");

                    b.HasKey("Id");

                    b.ToTable("Licenses");

                    b.HasDiscriminator<string>("Discriminator").HasValue("License");
                });

            modelBuilder.Entity("hNext.Model.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login");

                    b.Property<long>("PersonId");

                    b.Property<string>("eHealthId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("hNext.Model.PatientDiagnosys", b =>
                {
                    b.Property<long>("PatientId");

                    b.Property<long>("DiagnosysId");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.HasKey("PatientId", "DiagnosysId");

                    b.HasIndex("DiagnosysId");

                    b.ToTable("PatientDiagnoses");
                });

            modelBuilder.Entity("hNext.Model.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId");

                    b.Property<int?>("CountryOfBirthId");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("FamilyName")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("GenderId");

                    b.Property<string>("Patronimic");

                    b.Property<int?>("PlaceOfBirthId");

                    b.Property<string>("TaxId")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CountryOfBirthId");

                    b.HasIndex("DateOfBirth");

                    b.HasIndex("FamilyName");

                    b.HasIndex("GenderId");

                    b.HasIndex("PlaceOfBirthId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("hNext.Model.PersonEmails", b =>
                {
                    b.Property<long>("PersonId");

                    b.Property<long>("EmailId");

                    b.HasKey("PersonId", "EmailId");

                    b.HasIndex("EmailId");

                    b.ToTable("PersonEmails");
                });

            modelBuilder.Entity("hNext.Model.PersonPhone", b =>
                {
                    b.Property<long>("PersonId");

                    b.Property<long>("PhoneId");

                    b.HasKey("PersonId", "PhoneId");

                    b.HasIndex("PhoneId");

                    b.ToTable("PersonPhones");
                });

            modelBuilder.Entity("hNext.Model.Phone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("PhoneTypeId");

                    b.HasKey("Id");

                    b.HasIndex("Number");

                    b.HasIndex("PhoneTypeId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("hNext.Model.PhoneType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PhoneTypes");
                });

            modelBuilder.Entity("hNext.Model.Position", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("hNext.Model.PropertyType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("hNext.Model.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("hNext.Model.Specialty", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("hNext.Model.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("StreetTypeId");

                    b.Property<string>("eHealthId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Name");

                    b.HasIndex("StreetTypeId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("hNext.Model.StreetType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("eHealthId")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("StreetTypes");
                });

            modelBuilder.Entity("hNext.Model.HospitalLicense", b =>
                {
                    b.HasBaseType("hNext.Model.License");

                    b.Property<int>("HospitalId");

                    b.HasIndex("HospitalId");

                    b.HasDiscriminator().HasValue("HospitalLicense");
                });

            modelBuilder.Entity("hNext.Model.Address", b =>
                {
                    b.HasOne("hNext.Model.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("hNext.Model.CaseHistory", b =>
                {
                    b.HasOne("hNext.Model.Hospital", "Hospital")
                        .WithMany("CaseHistories")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.DocumentRegistry", "DocumentRegistry")
                        .WithOne("CaseHistory")
                        .HasForeignKey("hNext.Model.CaseHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Patient", "Patient")
                        .WithMany("CaseHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.Hospital", "ReferredBy")
                        .WithMany("Referred")
                        .HasForeignKey("ReferredById");
                });

            modelBuilder.Entity("hNext.Model.CaseHistoryAdmission", b =>
                {
                    b.HasOne("hNext.Model.CaseHistory", "CaseHistory")
                        .WithMany("Admissions")
                        .HasForeignKey("CaseHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Department", "Department")
                        .WithMany("Admissions")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("hNext.Model.CaseHistoryDiagnosys", b =>
                {
                    b.HasOne("hNext.Model.CaseHistory", "CaseHistory")
                        .WithMany("Diagnoses")
                        .HasForeignKey("CaseHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Diagnosys", "Diagnosys")
                        .WithMany("CaseHistories")
                        .HasForeignKey("DiagnosysId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.City", b =>
                {
                    b.HasOne("hNext.Model.CityType", "CityType")
                        .WithMany("Cities")
                        .HasForeignKey("CityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.District", "District")
                        .WithMany("Cities")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("hNext.Model.Department", b =>
                {
                    b.HasOne("hNext.Model.Hospital", "Hospital")
                        .WithMany("Departments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.DepartmentEmail", b =>
                {
                    b.HasOne("hNext.Model.Department", "Department")
                        .WithMany("Emails")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Email", "Email")
                        .WithMany("Departments")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.DepartmentPhone", b =>
                {
                    b.HasOne("hNext.Model.Department", "Department")
                        .WithMany("Phones")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Phone", "Phone")
                        .WithMany("Departments")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.DepartmentSpecialty", b =>
                {
                    b.HasOne("hNext.Model.Department", "Department")
                        .WithMany("Specialties")
                        .HasForeignKey("DeparmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Specialty", "Specialty")
                        .WithMany("DepartmentSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.Diagnosys", b =>
                {
                    b.HasOne("hNext.Model.ICD", "ICD")
                        .WithMany("Diagnoses")
                        .HasForeignKey("ICDId");
                });

            modelBuilder.Entity("hNext.Model.Diploma", b =>
                {
                    b.HasOne("hNext.Model.Doctor", "Doctor")
                        .WithMany("Diplomas")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.District", b =>
                {
                    b.HasOne("hNext.Model.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("hNext.Model.Doctor", b =>
                {
                    b.HasOne("hNext.Model.Person", "Person")
                        .WithOne("Doctor")
                        .HasForeignKey("hNext.Model.Doctor", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.DoctorPosition", b =>
                {
                    b.HasOne("hNext.Model.Department", "Department")
                        .WithMany("DoctorPositions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.Doctor", "Doctor")
                        .WithMany("DoctorPositions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.Hospital", "Hospital")
                        .WithMany("DoctorPositions")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.Position", "Position")
                        .WithMany("DoctorPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Specialty", "Specialty")
                        .WithMany("DoctorPositions")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.DoctorSpecialty", b =>
                {
                    b.HasOne("hNext.Model.Doctor", "Doctor")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Specialty", "Specialty")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.Document", b =>
                {
                    b.HasOne("hNext.Model.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Person", "Person")
                        .WithMany("Documents")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.DocumentRegistry", b =>
                {
                    b.HasOne("hNext.Model.Person", "Author")
                        .WithMany("DocumentRegistries")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("hNext.Model.GuardianWard", b =>
                {
                    b.HasOne("hNext.Model.Person", "Guardian")
                        .WithMany("Wards")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.Person", "Ward")
                        .WithMany("Guardians")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("hNext.Model.Hospital", b =>
                {
                    b.HasOne("hNext.Model.Address", "Address")
                        .WithMany("Hospitals")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.HospitalType", "HospitalType")
                        .WithMany("Hospitals")
                        .HasForeignKey("HospitalTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.PropertyType", "PropertyType")
                        .WithMany("Hospitals")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.HospitalEmail", b =>
                {
                    b.HasOne("hNext.Model.Email", "Email")
                        .WithMany("Hospitals")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Hospital", "Hospital")
                        .WithMany("Emails")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.HospitalPhone", b =>
                {
                    b.HasOne("hNext.Model.Hospital", "Hospital")
                        .WithMany("Phones")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Phone", "Phone")
                        .WithMany("Hospitals")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.Patient", b =>
                {
                    b.HasOne("hNext.Model.Person", "Person")
                        .WithOne("Patient")
                        .HasForeignKey("hNext.Model.Patient", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.PatientDiagnosys", b =>
                {
                    b.HasOne("hNext.Model.Diagnosys", "Diagnosys")
                        .WithMany("Patients")
                        .HasForeignKey("DiagnosysId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Patient", "Patient")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.Person", b =>
                {
                    b.HasOne("hNext.Model.Address", "Address")
                        .WithMany("People")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Country", "CountryOfBirth")
                        .WithMany("PeopleBorn")
                        .HasForeignKey("CountryOfBirthId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.Gender", "Gender")
                        .WithMany("People")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.City", "PlaceOfBirth")
                        .WithMany("PeopleBorn")
                        .HasForeignKey("PlaceOfBirthId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("hNext.Model.PersonEmails", b =>
                {
                    b.HasOne("hNext.Model.Email", "Email")
                        .WithMany("People")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Person", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.PersonPhone", b =>
                {
                    b.HasOne("hNext.Model.Person", "Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("hNext.Model.Phone", "Phone")
                        .WithMany("People")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.Phone", b =>
                {
                    b.HasOne("hNext.Model.PhoneType", "PhoneType")
                        .WithMany("Phones")
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.Region", b =>
                {
                    b.HasOne("hNext.Model.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("hNext.Model.Street", b =>
                {
                    b.HasOne("hNext.Model.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("hNext.Model.StreetType", "StreetType")
                        .WithMany("Streets")
                        .HasForeignKey("StreetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hNext.Model.HospitalLicense", b =>
                {
                    b.HasOne("hNext.Model.Hospital", "Hospital")
                        .WithMany("Licenses")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
